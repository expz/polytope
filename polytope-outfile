#!/bin/bash
#
# Run the polytope program. Write output to uniquely named file.
# 
# WARNING: If working on Brutus, this must be run using 'bsub' to work
# WARNING: If working on Brutus, the modules must be loaded BEFORE this script
#

# Get the name of the directory containing this script
DIR_POLYTOPE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Change to the root polytope directory
cd "$DIR_POLYTOPE"

# Configure the java command
if [[ "$HOSTNAME" == brutus* ]]; then

  # This doesn't seem to work. Do it manually before calling script.
  # Load Java 1.7 and libstdc++ library while suppressing output
  module unload java        1>/dev/null
  module load java/1.7      1>/dev/null
  module load gcc/4.7       1>/dev/null

  # Configure the Java command
  POLYTOPE_JAVA="java -XX:+UseSerialGC"

else
  
  # Search for Java
  if [ ! "$POLYTOPE_JAVA" ]; then
  
    if [ "which java" ]; then 
    
      POLYTOPE_JAVA="java"
      
    elif [ "$JAVA_HOME" ] && [[ -x "$JAVA_HOME/bin/java" ]]; then
    
      POLYTOPE_JAVA="$JAVA_HOME/bin/java"
    
    else
    
      echo "polytope: java not found. check the PATH or JAVA_HOME variable. exiting."
      exit
    
    fi
    
  fi

  # Check the version of Java is at least 1.7
  java_version=$("$POLYTOPE_JAVA" -version 2>&1 | \
               awk -F '"' '/version/ {print $2}')
  
  if [[ "$java_version" < "1.7" ]]; then
    
    echo "polytope: java version $java_version found, but version >= 1.7 required. exiting."
    exit
  
  fi

fi


# Set the native libraries directory according to the machine architecture
if [[ "$(uname -m)" == *64 ]]; then

  DIR_NATIVELIBS="lib/linux_amd64"

else

  DIR_NATIVELIBS="lib/linux_x86"

fi

# At least Brutus cares that the LD_LIBRARY_PATH is also set
if [ ! "$POLYTOPE_LD_PATH_SET" ]; then 

  LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DIR_POLYTOPE/$DIR_NATIVELIBS
  POLYTOPE_LD_PATH_SET=true

fi

# If the version of glibc is less than 2.14, then turn on the local glibc 2.15
# Get all libc6 libraries
LIBC_FILES=$(ldconfig -p | \
             grep libc.so.6 | \
             { \
               while read line
                 do [ ! "$line" ] && continue
                 printf "${line##* } "
               done
             })

# Calculate whether version $1 is less than or equal to version $2
function verlte { [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]; }

# If at least one libc6 library was found (Removes spaces)
if [ "${LIBC_FILES%%*( )}" != "" ]; then

  # Check the version numbers which each library can emulate
  for libc in $LIBC_FILES; do
    
    for ver in $(strings "$libc" | grep "GLIBC_" | sed -n 's/GLIBC_\([0-9]\.[0-9]\)/\1/p'); do
      
      # if the version is at least 2.14, then break
      if $(verlte "2.14" "$ver"); then
        
        LIBC_2_14_FOUND="true"
        break 2
  
      fi
    
    done
        
  done

fi

# If glibc < 2.14, turn on the local glibc 2.15 libraries while suppressing output
if [ ! "$LIBC_2_14_FOUND" ]; then
  echo Libc 2.14 not found. Switching to local copy.
  # The dot makes it run in the current shell so the variables stick around
  . $DIR_POLYTOPE/$DIR_NATIVELIBS/glibc-2.15/turn on       1>/dev/null

fi

OUTPUT_FILE=polytope$(date +"%H%M%N").txt

# -Xdisable-assertions \
# Run the program, passing on all command line arguments
"$POLYTOPE_JAVA" \
-Duser.dir="$DIR_POLYTOPE" \
-Djava.library.path="$DIR_NATIVELIBS:$DIR_NATIVELIBS/glibc-2.15/lib:$DIR_NATIVELIBS/glibc-2.15/usr/lib/gconv:$DIR_NATIVELIBS/glibc-2.15/usr/lib/libc" \
-Dfile.encoding=UTF-8 \
-classpath \
bin:\
lib/ppl_java.jar:\
lib/scala-library.jar:\
lib/scala-reflect.jar:\
lib/scala-parser-combinators_2.11-1.0.1.jar:\
lib/scalatest_2.11-2.1.6.jar:\
lib/junit-4.8.2.jar:\
"$DIR_NATIVELIBS/com.google.ortools.jar":\
lib/scallop_2.11-0.9.5.jar:\
lib/jfreechart-1.0.17.jar:\
lib/jcommon-1.0.21.jar:\
 \
polytope.package \
$@ 1> "$OUTPUT_FILE" 

echo Wrote output to:
echo "$OUTPUT_FILE"

# If we turned on the local glibc 2.15, then turn it off
if [ ! "$LIBC_2_14_FOUND" ]; then

  . $DIR_POLYTOPE/$DIR_NATIVELIBS/glibc-2.15/turn off      1>/dev/null

fi
