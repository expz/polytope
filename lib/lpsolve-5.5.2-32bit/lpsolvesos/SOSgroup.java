package lpsolvesos;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * typedef<br>
 * <i>native declaration : lp_SOS.h:2820</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SOSgroup extends Structure {
	/**
	 * Pointer to owner<br>
	 * C type : lprec*
	 */
	public lpsolvelib.lprec.ByReference lp;
	/**
	 * Array of pointers to SOS lists<br>
	 * C type : SOSrec**
	 */
	public lpsolvesos.SOSrec.ByReference[] sos_list;
	/** Size allocated to specially ordered sets (SOS1, SOS2...) */
	public int sos_alloc;
	/** Number of specially ordered sets (SOS1, SOS2...) */
	public int sos_count;
	/** The highest-order SOS in the group */
	public int maxorder;
	/** Number of the lowest order SOS in the group */
	public int sos1_count;
	/**
	 * Array of variable-sorted indeces to SOSes that the variable is member of<br>
	 * C type : int*
	 */
	public IntByReference membership;
	/**
	 * Starting positions of the each column's membership list<br>
	 * C type : int*
	 */
	public IntByReference memberpos;
	public SOSgroup() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("lp", "sos_list", "sos_alloc", "sos_count", "maxorder", "sos1_count", "membership", "memberpos");
	}
	/**
	 * @param lp Pointer to owner<br>
	 * C type : lprec*<br>
	 * @param sos_list Array of pointers to SOS lists<br>
	 * C type : SOSrec**<br>
	 * @param sos_alloc Size allocated to specially ordered sets (SOS1, SOS2...)<br>
	 * @param sos_count Number of specially ordered sets (SOS1, SOS2...)<br>
	 * @param maxorder The highest-order SOS in the group<br>
	 * @param sos1_count Number of the lowest order SOS in the group<br>
	 * @param membership Array of variable-sorted indeces to SOSes that the variable is member of<br>
	 * C type : int*<br>
	 * @param memberpos Starting positions of the each column's membership list<br>
	 * C type : int*
	 */
	public SOSgroup(lpsolvelib.lprec.ByReference lp, lpsolvesos.SOSrec.ByReference sos_list[], int sos_alloc, int sos_count, int maxorder, int sos1_count, IntByReference membership, IntByReference memberpos) {
		super();
		this.lp = lp;
		if ((sos_list.length != this.sos_list.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.sos_list = sos_list;
		this.sos_alloc = sos_alloc;
		this.sos_count = sos_count;
		this.maxorder = maxorder;
		this.sos1_count = sos1_count;
		this.membership = membership;
		this.memberpos = memberpos;
	}
	public static class ByReference extends SOSgroup implements Structure.ByReference {
		
	};
	public static class ByValue extends SOSgroup implements Structure.ByValue {
		
	};
}
