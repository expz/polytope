package lpsolvetypes;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
import lpsolvetypes.LpSolveTypesLibrary.QSORTrec;
/**
 * <i>native declaration : lp_types.h:2327</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class multirec extends Structure {
	/** C type : lprec* */
	public lpsolvelib.lprec.ByReference lp;
	/** The maximum number of multiply priced rows/columns */
	public int size;
	/** The current / active number of multiply priced rows/columns */
	public int used;
	/** The active/used count at which a full update is triggered */
	public int limit;
	/**
	 * Array of best multiply priced rows/columns<br>
	 * C type : pricerec*
	 */
	public lpsolvetypes.pricerec.ByReference items;
	/**
	 * The indeces of available positions in "items"<br>
	 * C type : int*
	 */
	public IntByReference freeList;
	/**
	 * List of pointers to "pricerec" items in sorted order<br>
	 * C type : QSORTrec*
	 */
	public QSORTrec sortedList;
	/**
	 * Working array (values in sortedList order)<br>
	 * C type : double*
	 */
	public DoubleByReference stepList;
	/**
	 * Working array (values in sortedList order)<br>
	 * C type : double*
	 */
	public DoubleByReference valueList;
	/**
	 * The final exported index list of pivot variables<br>
	 * C type : int*
	 */
	public IntByReference indexSet;
	/** Index of currently active multiply priced row/column */
	public int active;
	public int retries;
	public double step_base;
	public double step_last;
	public double obj_base;
	public double obj_last;
	public double epszero;
	public double maxpivot;
	public double maxbound;
	public byte sorted;
	public byte truncinf;
	public byte objcheck;
	public byte dirty;
	public multirec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("lp", "size", "used", "limit", "items", "freeList", "sortedList", "stepList", "valueList", "indexSet", "active", "retries", "step_base", "step_last", "obj_base", "obj_last", "epszero", "maxpivot", "maxbound", "sorted", "truncinf", "objcheck", "dirty");
	}
	public static class ByReference extends multirec implements Structure.ByReference {
		
	};
	public static class ByValue extends multirec implements Structure.ByValue {
		
	};
}
