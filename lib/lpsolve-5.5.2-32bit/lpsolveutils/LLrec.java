package lpsolveutils;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_utils.h:2342</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class LLrec extends Structure {
	/** The allocated list size */
	public int size;
	/** The current entry count */
	public int count;
	public int firstitem;
	public int lastitem;
	/**
	 * The list of forward and backward-mapped entries<br>
	 * C type : int*
	 */
	public IntByReference map;
	public LLrec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("size", "count", "firstitem", "lastitem", "map");
	}
	/**
	 * @param size The allocated list size<br>
	 * @param count The current entry count<br>
	 * @param map The list of forward and backward-mapped entries<br>
	 * C type : int*
	 */
	public LLrec(int size, int count, int firstitem, int lastitem, IntByReference map) {
		super();
		this.size = size;
		this.count = count;
		this.firstitem = firstitem;
		this.lastitem = lastitem;
		this.map = map;
	}
	public static class ByReference extends LLrec implements Structure.ByReference {
		
	};
	public static class ByValue extends LLrec implements Structure.ByValue {
		
	};
}
