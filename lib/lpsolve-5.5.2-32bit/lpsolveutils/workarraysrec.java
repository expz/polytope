package lpsolveutils;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_utils.h:2335</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class workarraysrec extends Structure {
	/** C type : lprec* */
	public lpsolvelib.lprec.ByReference lp;
	public int size;
	public int count;
	/** C type : char** */
	public PointerByReference vectorarray;
	/** C type : int* */
	public IntByReference vectorsize;
	public workarraysrec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("lp", "size", "count", "vectorarray", "vectorsize");
	}
	/**
	 * @param lp C type : lprec*<br>
	 * @param vectorarray C type : char**<br>
	 * @param vectorsize C type : int*
	 */
	public workarraysrec(lpsolvelib.lprec.ByReference lp, int size, int count, PointerByReference vectorarray, IntByReference vectorsize) {
		super();
		this.lp = lp;
		this.size = size;
		this.count = count;
		this.vectorarray = vectorarray;
		this.vectorsize = vectorsize;
	}
	public static class ByReference extends workarraysrec implements Structure.ByReference {
		
	};
	public static class ByValue extends workarraysrec implements Structure.ByValue {
		
	};
}
