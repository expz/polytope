package lpsolveutils;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_utils.h:2348</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PVrec extends Structure {
	/** The allocated list item count */
	public int count;
	/**
	 * Starting index of the current value<br>
	 * C type : int*
	 */
	public IntByReference startpos;
	/**
	 * The list of forward and backward-mapped entries<br>
	 * C type : double*
	 */
	public DoubleByReference value;
	/**
	 * The parent record in a pushed chain<br>
	 * C type : _PVrec*
	 */
	public PVrec.ByReference parent;
	public PVrec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("count", "startpos", "value", "parent");
	}
	/**
	 * @param count The allocated list item count<br>
	 * @param startpos Starting index of the current value<br>
	 * C type : int*<br>
	 * @param value The list of forward and backward-mapped entries<br>
	 * C type : double*<br>
	 * @param parent The parent record in a pushed chain<br>
	 * C type : _PVrec*
	 */
	public PVrec(int count, IntByReference startpos, DoubleByReference value, PVrec.ByReference parent) {
		super();
		this.count = count;
		this.startpos = startpos;
		this.value = value;
		this.parent = parent;
	}
	public static class ByReference extends PVrec implements Structure.ByReference {
		
	};
	public static class ByValue extends PVrec implements Structure.ByValue {
		
	};
}
