package lpsolvehash;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_Hash.h:13</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class hashtable extends Structure {
	/** C type : hashelem** */
	public lpsolvehash.hashelem.ByReference[] table;
	public int size;
	public int base;
	public int count;
	/** C type : _hashelem* */
	public lpsolvehash.hashelem.ByReference first;
	/** C type : _hashelem* */
	public lpsolvehash.hashelem.ByReference last;
	public hashtable() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("table", "size", "base", "count", "first", "last");
	}
	/**
	 * @param table C type : hashelem**<br>
	 * @param first C type : _hashelem*<br>
	 * @param last C type : _hashelem*
	 */
	public hashtable(lpsolvehash.hashelem.ByReference table[], int size, int base, int count, lpsolvehash.hashelem.ByReference first, lpsolvehash.hashelem.ByReference last) {
		super();
		if ((table.length != this.table.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.table = table;
		this.size = size;
		this.base = base;
		this.count = count;
		this.first = first;
		this.last = last;
	}
	public static class ByReference extends hashtable implements Structure.ByReference {
		
	};
	public static class ByValue extends hashtable implements Structure.ByValue {
		
	};
}
