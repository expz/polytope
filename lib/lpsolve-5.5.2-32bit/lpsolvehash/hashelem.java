package lpsolvehash;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_Hash.h:5</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class hashelem extends Structure {
	/** C type : char* */
	public Pointer name;
	public int index;
	/** C type : _hashelem* */
	public hashelem.ByReference next;
	/** C type : _hashelem* */
	public hashelem.ByReference nextelem;
	public hashelem() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("name", "index", "next", "nextelem");
	}
	/**
	 * @param name C type : char*<br>
	 * @param next C type : _hashelem*<br>
	 * @param nextelem C type : _hashelem*
	 */
	public hashelem(Pointer name, int index, hashelem.ByReference next, hashelem.ByReference nextelem) {
		super();
		this.name = name;
		this.index = index;
		this.next = next;
		this.nextelem = nextelem;
	}
	public static class ByReference extends hashelem implements Structure.ByReference {
		
	};
	public static class ByValue extends hashelem implements Structure.ByValue {
		
	};
}
