package lpsolvehash;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import lpsolvehash.hashelem.ByReference;
import lpsolvelib.lprec;
/**
 * JNA Wrapper for library <b>LpSolveHash</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class LpSolveHashLibrary implements Library {
	public static final String JNA_LIBRARY_NAME = "LpSolveHash";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LpSolveHashLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(LpSolveHashLibrary.JNA_LIBRARY_NAME);
	}
	/**
	 * Original signature : <code>hashtable* create_hash_table(int, int)</code><br>
	 * <i>native declaration : lp_Hash.h:16</i>
	 */
	public static native hashtable create_hash_table(int size, int base);
	/**
	 * Original signature : <code>void free_hash_table(hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:18</i>
	 */
	public static native void free_hash_table(hashtable ht);
	/**
	 * Original signature : <code>hashelem* findhash(const char*, hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:20</i><br>
	 * @deprecated use the safer methods {@link #findhash(java.lang.String, lpsolvehash.hashtable)} and {@link #findhash(com.sun.jna.Pointer, lpsolvehash.hashtable)} instead
	 */
	@Deprecated 
	public static native hashelem findhash(Pointer name, hashtable ht);
	/**
	 * Original signature : <code>hashelem* findhash(const char*, hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:20</i>
	 */
	public static native hashelem findhash(String name, hashtable ht);
	/**
	 * Original signature : <code>hashelem* puthash(const char*, int, hashelem**, hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:22</i><br>
	 * @deprecated use the safer methods {@link #puthash(java.lang.String, int, lpsolvehash.hashelem.ByReference[], lpsolvehash.hashtable)} and {@link #puthash(com.sun.jna.Pointer, int, lpsolvehash.hashelem.ByReference[], lpsolvehash.hashtable)} instead
	 */
	@Deprecated 
	public static native hashelem puthash(Pointer name, int index, PointerByReference list, hashtable ht);
	/**
	 * Original signature : <code>hashelem* puthash(const char*, int, hashelem**, hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:22</i>
	 */
	public static native hashelem puthash(String name, int index, hashelem.ByReference list[], hashtable ht);
	/**
	 * Original signature : <code>hashelem* puthash(const char*, int, hashelem**, hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:22</i>
	 */
	public static native hashelem puthash(Pointer name, int index, hashelem.ByReference list[], hashtable ht);
	/**
	 * Original signature : <code>void drophash(const char*, hashelem**, hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:24</i><br>
	 * @deprecated use the safer methods {@link #drophash(java.lang.String, lpsolvehash.hashelem.ByReference[], lpsolvehash.hashtable)} and {@link #drophash(com.sun.jna.Pointer, lpsolvehash.hashelem.ByReference[], lpsolvehash.hashtable)} instead
	 */
	@Deprecated 
	public static native void drophash(Pointer name, PointerByReference list, hashtable ht);
	/**
	 * Original signature : <code>void drophash(const char*, hashelem**, hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:24</i>
	 */
	public static native void drophash(String name, hashelem.ByReference list[], hashtable ht);
	/**
	 * Original signature : <code>void drophash(const char*, hashelem**, hashtable*)</code><br>
	 * <i>native declaration : lp_Hash.h:24</i>
	 */
	public static native void drophash(Pointer name, hashelem.ByReference list[], hashtable ht);
	/**
	 * Original signature : <code>void free_hash_item(hashelem**)</code><br>
	 * <i>native declaration : lp_Hash.h:26</i><br>
	 * @deprecated use the safer method {@link #free_hash_item(lpsolvehash.hashelem.ByReference[])} instead
	 */
	@Deprecated 
	public static native void free_hash_item(PointerByReference hp);
	/**
	 * Original signature : <code>void free_hash_item(hashelem**)</code><br>
	 * <i>native declaration : lp_Hash.h:26</i>
	 */
	public static native void free_hash_item(hashelem.ByReference hp[]);
	/**
	 * Original signature : <code>hashtable* copy_hash_table(hashtable*, hashelem**, int)</code><br>
	 * <i>native declaration : lp_Hash.h:28</i><br>
	 * @deprecated use the safer method {@link #copy_hash_table(lpsolvehash.hashtable, lpsolvehash.hashelem.ByReference[], int)} instead
	 */
	@Deprecated 
	public static native hashtable copy_hash_table(hashtable ht, PointerByReference list, int newsize);
	/**
	 * Original signature : <code>hashtable* copy_hash_table(hashtable*, hashelem**, int)</code><br>
	 * <i>native declaration : lp_Hash.h:28</i>
	 */
	public static native hashtable copy_hash_table(hashtable ht, hashelem.ByReference list[], int newsize);
	/**
	 * Original signature : <code>int find_var(lprec*, char*, MYBOOL)</code><br>
	 * <i>native declaration : lp_Hash.h:30</i><br>
	 * @deprecated use the safer methods {@link #find_var(lpsolvelib.lprec, java.nio.ByteBuffer, lpsolvehash.LpSolveHashLibrary.unsigned)} and {@link #find_var(lpsolvelib.lprec, com.sun.jna.Pointer, lpsolvehash.LpSolveHashLibrary.unsigned)} instead
	 */
	@Deprecated 
	public static native int find_var(lprec lp, Pointer name, LpSolveHashLibrary.unsigned verbose);
	/**
	 * Original signature : <code>int find_var(lprec*, char*, MYBOOL)</code><br>
	 * <i>native declaration : lp_Hash.h:30</i>
	 */
	public static native int find_var(lprec lp, ByteBuffer name, LpSolveHashLibrary.unsigned verbose);
	/**
	 * Original signature : <code>int find_row(lprec*, char*, MYBOOL)</code><br>
	 * <i>native declaration : lp_Hash.h:32</i><br>
	 * @deprecated use the safer methods {@link #find_row(lpsolvelib.lprec, java.nio.ByteBuffer, lpsolvehash.LpSolveHashLibrary.unsigned)} and {@link #find_row(lpsolvelib.lprec, com.sun.jna.Pointer, lpsolvehash.LpSolveHashLibrary.unsigned)} instead
	 */
	@Deprecated 
	public static native int find_row(lprec lp, Pointer name, LpSolveHashLibrary.unsigned Unconstrained_rows_found);
	/**
	 * Original signature : <code>int find_row(lprec*, char*, MYBOOL)</code><br>
	 * <i>native declaration : lp_Hash.h:32</i>
	 */
	public static native int find_row(lprec lp, ByteBuffer name, LpSolveHashLibrary.unsigned Unconstrained_rows_found);
	public static class unsigned extends PointerType {
		public unsigned(Pointer address) {
			super(address);
		}
		public unsigned() {
			super();
		}
	};
}
