package lpsolvelib;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_lib.h:2795</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class partialrec extends Structure {
	/** C type : lprec* */
	public lpsolvelib.lprec.ByReference lp;
	/** ## The number of logical blocks or stages in the model */
	public int blockcount;
	/** The currently active block */
	public int blocknow;
	/**
	 * Array of column indeces giving the start of each block<br>
	 * C type : int*
	 */
	public IntByReference blockend;
	/**
	 * Array of column indeces giving the start scan position<br>
	 * C type : int*
	 */
	public IntByReference blockpos;
	public byte isrow;
	public partialrec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("lp", "blockcount", "blocknow", "blockend", "blockpos", "isrow");
	}
	/**
	 * @param lp C type : lprec*<br>
	 * @param blockcount ## The number of logical blocks or stages in the model<br>
	 * @param blocknow The currently active block<br>
	 * @param blockend Array of column indeces giving the start of each block<br>
	 * C type : int*<br>
	 * @param blockpos Array of column indeces giving the start scan position<br>
	 * C type : int*
	 */
	public partialrec(lpsolvelib.lprec.ByReference lp, int blockcount, int blocknow, IntByReference blockend, IntByReference blockpos, byte isrow) {
		super();
		this.lp = lp;
		this.blockcount = blockcount;
		this.blocknow = blocknow;
		this.blockend = blockend;
		this.blockpos = blockpos;
		this.isrow = isrow;
	}
	public static class ByReference extends partialrec implements Structure.ByReference {
		
	};
	public static class ByValue extends partialrec implements Structure.ByValue {
		
	};
}
