package lpsolvemipbb;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
import lpsolvelib.lprec;
import lpsolvemipbb.BBrec.ByReference;
/**
 * JNA Wrapper for library <b>LpSolveMipbb</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class LpSolveMipbbLibrary implements Library {
	public static final String JNA_LIBRARY_NAME = "LpSolveMipbb";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LpSolveMipbbLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(LpSolveMipbbLibrary.JNA_LIBRARY_NAME);
	}
	/**
	 * Original signature : <code>BBrec* create_BB(lprec*, BBrec*, unsigned char)</code><br>
	 * <i>native declaration : lp_mipbb.h:2753</i>
	 */
	public static native BBrec create_BB(lprec lp, BBrec parentBB, byte dofullcopy);
	/**
	 * Original signature : <code>BBrec* push_BB(lprec*, BBrec*, int, int, int)</code><br>
	 * <i>native declaration : lp_mipbb.h:2755</i>
	 */
	public static native BBrec push_BB(lprec lp, BBrec parentBB, int varno, int vartype, int varcus);
	/**
	 * Original signature : <code>char initbranches_BB(BBrec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2757</i>
	 */
	public static native byte initbranches_BB(BBrec BB);
	/**
	 * Original signature : <code>char fillbranches_BB(BBrec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2759</i>
	 */
	public static native byte fillbranches_BB(BBrec BB);
	/**
	 * Original signature : <code>char nextbranch_BB(BBrec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2761</i>
	 */
	public static native byte nextbranch_BB(BBrec BB);
	/**
	 * Original signature : <code>char strongbranch_BB(lprec*, BBrec*, int, int, int)</code><br>
	 * <i>native declaration : lp_mipbb.h:2763</i>
	 */
	public static native byte strongbranch_BB(lprec lp, BBrec BB, int varno, int vartype, int varcus);
	/**
	 * Original signature : <code>char initcuts_BB(lprec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2765</i>
	 */
	public static native byte initcuts_BB(lprec lp);
	/**
	 * Original signature : <code>int updatecuts_BB(lprec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2767</i>
	 */
	public static native int updatecuts_BB(lprec lp);
	/**
	 * Original signature : <code>char freecuts_BB(lprec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2769</i>
	 */
	public static native byte freecuts_BB(lprec lp);
	/**
	 * Original signature : <code>BBrec* findself_BB(BBrec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2771</i>
	 */
	public static native BBrec findself_BB(BBrec BB);
	/**
	 * Original signature : <code>int solve_LP(lprec*, BBrec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2773</i>
	 */
	public static native int solve_LP(lprec lp, BBrec BB);
	/**
	 * Original signature : <code>int rcfbound_BB(BBrec*, int, unsigned char, double*, unsigned char*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2775</i><br>
	 * @deprecated use the safer methods {@link #rcfbound_BB(lpsolvemipbb.BBrec, int, byte, java.nio.DoubleBuffer, java.nio.ByteBuffer)} and {@link #rcfbound_BB(lpsolvemipbb.BBrec, int, byte, com.sun.jna.ptr.DoubleByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int rcfbound_BB(BBrec BB, int varno, byte isINT, DoubleByReference newbound, Pointer isfeasible);
	/**
	 * Original signature : <code>int rcfbound_BB(BBrec*, int, unsigned char, double*, unsigned char*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2775</i>
	 */
	public static native int rcfbound_BB(BBrec BB, int varno, byte isINT, DoubleBuffer newbound, ByteBuffer isfeasible);
	/**
	 * Original signature : <code>char findnode_BB(BBrec*, int*, int*, int*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2777</i><br>
	 * @deprecated use the safer methods {@link #findnode_BB(lpsolvemipbb.BBrec, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #findnode_BB(lpsolvemipbb.BBrec, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native byte findnode_BB(BBrec BB, IntByReference varno, IntByReference vartype, IntByReference varcus);
	/**
	 * Original signature : <code>char findnode_BB(BBrec*, int*, int*, int*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2777</i>
	 */
	public static native byte findnode_BB(BBrec BB, IntBuffer varno, IntBuffer vartype, IntBuffer varcus);
	/**
	 * Original signature : <code>int solve_BB(BBrec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2779</i>
	 */
	public static native int solve_BB(BBrec BB);
	/**
	 * Original signature : <code>char free_BB(BBrec**)</code><br>
	 * <i>native declaration : lp_mipbb.h:2781</i><br>
	 * @deprecated use the safer method {@link #free_BB(lpsolvemipbb.BBrec.ByReference[])} instead
	 */
	@Deprecated 
	public static native byte free_BB(PointerByReference BB);
	/**
	 * Original signature : <code>char free_BB(BBrec**)</code><br>
	 * <i>native declaration : lp_mipbb.h:2781</i>
	 */
	public static native byte free_BB(BBrec.ByReference BB[]);
	/**
	 * Original signature : <code>BBrec* pop_BB(BBrec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2783</i>
	 */
	public static native BBrec pop_BB(BBrec BB);
	/**
	 * Original signature : <code>int run_BB(lprec*)</code><br>
	 * <i>native declaration : lp_mipbb.h:2785</i>
	 */
	public static native int run_BB(lprec lp);
}
