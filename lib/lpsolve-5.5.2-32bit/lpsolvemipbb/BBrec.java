package lpsolvemipbb;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_mipbb.h:2750</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class BBrec extends Structure {
	/** C type : _BBrec* */
	public BBrec.ByReference parent;
	/** C type : _BBrec* */
	public BBrec.ByReference child;
	/** C type : lprec* */
	public lpsolvelib.lprec.ByReference lp;
	public int varno;
	public int vartype;
	/** Count of non-int variables of the previous branch */
	public int lastvarcus;
	public int lastrcf;
	public int nodesleft;
	public int nodessolved;
	public int nodestatus;
	public double noderesult;
	/** Optimal solution of the previous branch */
	public double lastsolution;
	public double sc_bound;
	/** C type : double* */
	public DoubleByReference upbo;
	/** C type : double* */
	public DoubleByReference lowbo;
	public double UPbound;
	public double LObound;
	/** Signals that incoming bounds were changed */
	public int UBtrack;
	/** Signals that incoming bounds were changed */
	public int LBtrack;
	/** Flag indicating if we "own" the bound vectors */
	public byte contentmode;
	public byte sc_canset;
	public byte isSOS;
	public byte isGUB;
	/**
	 * Extended list of variables managed by this B&B level<br>
	 * C type : int*
	 */
	public IntByReference varmanaged;
	/** State variable indicating the active B&B bound */
	public byte isfloor;
	/** State variable indicating if bounds have been rebased */
	public byte UBzerobased;
	public BBrec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("parent", "child", "lp", "varno", "vartype", "lastvarcus", "lastrcf", "nodesleft", "nodessolved", "nodestatus", "noderesult", "lastsolution", "sc_bound", "upbo", "lowbo", "UPbound", "LObound", "UBtrack", "LBtrack", "contentmode", "sc_canset", "isSOS", "isGUB", "varmanaged", "isfloor", "UBzerobased");
	}
	public static class ByReference extends BBrec implements Structure.ByReference {
		
	};
	public static class ByValue extends BBrec implements Structure.ByValue {
		
	};
}
