package lpsolvematrix;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_matrix.h:2530</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class MATrec extends Structure {
	/**
	 * Owner reference<br>
	 * C type : lprec*
	 */
	public lpsolvelib.lprec.ByReference lp;
	/** Active dimensions */
	public int rows;
	public int columns;
	/** Allocated memory */
	public int rows_alloc;
	public int columns_alloc;
	/** The allocated size for matrix sized structures */
	public int mat_alloc;
	/** C type : int* */
	public IntByReference col_mat_colnr;
	/** C type : int* */
	public IntByReference col_mat_rownr;
	/** C type : double* */
	public DoubleByReference col_mat_value;
	/**
	 * columns_alloc+1 : col_end[i] is the index of the<br>
	 * first element after column i; column[i] is stored<br>
	 * in elements col_end[i-1] to col_end[i]-1<br>
	 * C type : int*
	 */
	public IntByReference col_end;
	/**
	 * user-definable tag associated with each column<br>
	 * C type : int*
	 */
	public IntByReference col_tag;
	/**
	 * mat_alloc : From index 0, row_mat contains the<br>
	 * row-ordered index of the elements of col_mat<br>
	 * C type : int*
	 */
	public IntByReference row_mat;
	/**
	 * rows_alloc+1 : row_end[i] is the index of the<br>
	 * first element in row_mat after row i<br>
	 * C type : int*
	 */
	public IntByReference row_end;
	/**
	 * user-definable tag associated with each row<br>
	 * C type : int*
	 */
	public IntByReference row_tag;
	/**
	 * Array of maximum values of each column<br>
	 * C type : double*
	 */
	public DoubleByReference colmax;
	/**
	 * Array of maximum values of each row<br>
	 * C type : double*
	 */
	public DoubleByReference rowmax;
	/** Zero element rejection threshold */
	public double epsvalue;
	/** The largest absolute value in the matrix */
	public double infnorm;
	public double dynrange;
	/** TRUE if row_end & row_mat are valid */
	public byte row_end_valid;
	/** TRUE if the current (temporary) matrix order is row-wise */
	public byte is_roworder;
	public MATrec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("lp", "rows", "columns", "rows_alloc", "columns_alloc", "mat_alloc", "col_mat_colnr", "col_mat_rownr", "col_mat_value", "col_end", "col_tag", "row_mat", "row_end", "row_tag", "colmax", "rowmax", "epsvalue", "infnorm", "dynrange", "row_end_valid", "is_roworder");
	}
	public static class ByReference extends MATrec implements Structure.ByReference {
		
	};
	public static class ByValue extends MATrec implements Structure.ByValue {
		
	};
}
