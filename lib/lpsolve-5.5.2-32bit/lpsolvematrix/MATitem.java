package lpsolvematrix;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lp_matrix.h:2500</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class MATitem extends Structure {
	public int rownr;
	public int colnr;
	public double value;
	public MATitem() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("rownr", "colnr", "value");
	}
	public MATitem(int rownr, int colnr, double value) {
		super();
		this.rownr = rownr;
		this.colnr = colnr;
		this.value = value;
	}
	public static class ByReference extends MATitem implements Structure.ByReference {
		
	};
	public static class ByValue extends MATitem implements Structure.ByValue {
		
	};
}
