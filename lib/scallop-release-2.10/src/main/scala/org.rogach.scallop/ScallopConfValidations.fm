package org.rogach.scallop

import exceptions._

/** Helper trait for generaton of `validate` methods on ScallopConf. */
trait ScallopConfValidations { this: ScallopConf =>

  protected var validations: List[() => Either[String, Unit]] = Nil

<#macro lc num><#if num == 0><#else><#list 1..num as h><#nested h><#if num != h>,</#if></#list></#if></#macro>

<#macro nz num><#if num != 0> <#nested></#if></#macro>

<#macro tp len><@nz len> [ <@lc len ; i> <#nested i> </@lc> ]</@nz></#macro>

<#list 0..7 as i>
  /** Adds a validation function to this configuration. This function will be run after all other verification steps.
    * Automatically defines co-dependent relationship on these options.
    * @param fn Validation function. In case of error, it should return Left with the error message.
    */
  def validate <@tp i ; j> A${j} </@tp> ( <@lc i ; j> o${j}: ScallopOption[A${j}] </@lc> ) (fn: (<@lc i ; j> A${j} </@lc>) => Either[String, Unit]) {
    <@nz i>codependent ( <@lc i ; j> o${j} </@lc> )</@nz>
    validations :+= { () =>
      fn( <@lc i ; j> o${j}() </@lc> )
    }
  }
</#list>

<#list 1..7 as i>
  /** Adds a validation function to this configuration. This function will be run after all other verification steps.
    * @param fn Validation function. In case of error, it should return Left with the error message.
    */
  def validateOpt <@tp i ; j>A${j}</@tp> ( <@lc i ; j> o${j}: ScallopOption[A${j}] </@lc> ) (fn: (<@lc i ; j> Option[A${j}] </@lc>) => Either[String, Unit]) {
    validations :+= { () =>
      fn( <@lc i ; j> o${j}.get </@lc> )
    }
  }
</#list>

}
